scale_color_manual(values=c("red"="red", "blue"="blue"), guide = "none") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(xlim = c(0, 3000)) +
theme_modern() +
theme(axis.text.y = element_blank()) +
facet_wrap(~Participant) +
labs(y = "", x = "Reaction Time (ms)")
p
# ggsave("figures/outliers.png", p, width=20, height=15)
# Filter out
df <- filter(df, !Participant %in% outliers)
# Chunk 6
temp <- df |>
group_by(Participant, Illusion_Type, Block) |>
summarize(ErrorRate_per_block = sum(Error) / n()) |>
ungroup() |>
arrange(desc(ErrorRate_per_block))
temp2 <- temp |>
filter(ErrorRate_per_block >= 0.5) |>
group_by(Illusion_Type, Block) |>
summarize(n = n()) |>
arrange(desc(n), Illusion_Type) |>
ungroup() |>
mutate(n_trials = cumsum(n * 56),
p_trials = n_trials / nrow(df))
# knitr::kable(temp2)
p1 <- temp |>
estimate_density(at = c("Illusion_Type", "Block")) |>
ggplot(aes(x = x, y = y)) +
geom_line(aes(color = Illusion_Type, linetype = Block)) +
geom_vline(xintercept = 0.5, linetype = "dashed") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(y = "Distribution", x = "Error Rate") +
theme_modern()
p2 <- temp2 |>
mutate(Block = fct_rev(Block)) |>
ggplot(aes(x = Illusion_Type, y = p_trials)) +
geom_bar(stat="identity", aes(fill = Block)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(labels = scales::percent, expand = c(0, 0)) +
labs(y = "Percentage of Trials Removed", x = "Illusion Type") +
theme_modern() +
theme(axis.text.x = element_text(angle=45, hjust = 1))
p1 | p2
# Drop
df <- df |>
group_by(Participant, Illusion_Type, Block) |>
mutate(ErrorRate_per_block = sum(Error) / n()) |>
ungroup() |>
filter(ErrorRate_per_block < 0.5) |>
select(-ErrorRate_per_block)
rm(temp, temp2)
# Chunk 7
dfsub <- df |>
group_by(Participant) |>
select(Participant, Age, Sex, Education, Nationality, Ethnicity, Duration, Break_Duration, Screen_Resolution, Screen_Refresh, Device_OS) |>
slice(1) |>
ungroup()
# Chunk 8
plot_distribution <- function(dfsub, what = "Age", title = what, subtitle = "", fill = "orange") {
dfsub |>
ggplot(aes_string(x = what)) +
geom_density(fill = fill) +
geom_vline(xintercept = mean(dfsub[[what]]), color = "red", linetype = "dashed") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle(title, subtitle = subtitle) +
theme_modern() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(face = "italic", hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
}
plot_waffle <- function(dfsub, what = "Nationality") {
ggwaffle::waffle_iron(dfsub, what) |>
# mutate(label = emojifont::fontawesome('fa-twitter')) |>
ggplot(aes(x, y, fill = group)) +
ggwaffle::geom_waffle() +
# geom_point() +
# geom_text(aes(label=label), family='fontawesome-webfont', size=4) +
coord_equal() +
ggtitle(what) +
labs(fill = "") +
theme_void() +
theme(plot.title = element_text(face = "bold", hjust = 0.5))
}
# Chunk 9
p1 <- plot_distribution(dfsub, "Age", fill = "#FF9800")
p2 <- plot_distribution(dfsub, "Duration", title = "Total Duration", subtitle = "in minutes", fill = "#F44336")
p3 <- plot_distribution(dfsub, "Break_Duration", title = "Break Duration", subtitle = "in minutes", fill = "#3F51B5")
p4 <- plot_waffle(dfsub, "Sex") +
scale_fill_manual(values = c("Male" = "#2196F3", "Female" = "#E91E63", "Other" = "#FF9800"))
p5 <- plot_waffle(dfsub, "Education") +
scale_fill_viridis_d()
p6 <- plot_waffle(dfsub, "Nationality") +
scale_fill_metro_d()
p7 <- plot_waffle(dfsub, "Ethnicity") +
scale_fill_manual(values = c("Latino" = "#FF5722", "Asian" = "#FF9800", "Caucasian" = "#2196F3", "African" = "#4CAF50", "Jewish" = "#9C27B0"))
p8 <- plot_waffle(dfsub, "Screen_Resolution") +
scale_fill_pizza_d()
p9 <- plot_waffle(dfsub, "Device_OS") +
scale_fill_bluebrown_d()
# p10 <- plot_waffle(dfsub, "Screen_Refresh") +
#   scale_fill_viridis_d()
(p1 / p2 / p3) | (p4 / p5 / p6) | (p7 / p8 / p9)
# Chunk 10
p1 <- estimate_density(df, select = "RT", at = "Participant") |>
group_by(Participant) |>
normalize(select = "y") |>
ungroup() |>
ggplot(aes(x = x, y = y)) +
geom_area(data = normalize(estimate_density(df, select = "RT"), select = "y"), alpha = 0.2) +
geom_line(aes(color = Participant, group = Participant)) +
geom_vline(xintercept = c(150, 3000), linetype = "dashed", color = "red") +
scale_color_material_d("rainbow", guide = "none") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(xlim = c(0, 3500)) +
theme_modern() +
theme(axis.text.y = element_blank()) +
# facet_wrap(~Participant) +
labs(y = "", x = "Reaction Time (ms)")
df$Outlier <- df$RT < 150 | df$RT > 3000
p2 <- df |>
group_by(Participant) |>
summarize(Outlier = sum(Outlier) / n()) |>
mutate(Participant = fct_reorder(Participant, Outlier)) |>
ggplot(aes(x = Participant, y = Outlier)) +
geom_bar(stat = "identity", aes(fill = Participant)) +
scale_fill_material_d("rainbow", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = scales::percent) +
see::theme_modern() +
theme(axis.text.x = element_blank())
p1 | p2
# Chunk 11
df <- filter(df, Outlier == FALSE)
data <- filter(df, Illusion_Type == "Delboeuf")
data |>
group_by(Illusion_Difference) |>
summarize(Error = mean(Error)) |>
ggplot(aes(x = Illusion_Difference, y = Error)) +
# geom_bar(stat="identity") +
geom_line(aes(group = 1))
data |>
group_by(Illusion_Difference_Sqrt) |>
summarize(Error = mean(Error)) |>
ggplot(aes(x = Illusion_Difference_Sqrt, y = Error)) +
# geom_bar(stat="identity") +
geom_line(aes(group = 1))
data |>
group_by(Illusion_Difference_Sqrt) |>
summarize(Error = mean(Error))
unique(df$Illusion_Difference)
df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"]
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"])
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"])
unique(sqrt(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"]))
# Preprocessing Function
preprocess_raw <- function(file) {
data <- read.csv(file)
if (!"final_results" %in% data$screen) {
print(paste0("Warning: Incomplete data for ", file))
return(data.frame())
}
# Demographics
dem <- data[data$screen == "demographics" & !is.na(data$screen), "response"]
# Info
info <- data[data$screen == "browser_info" & !is.na(data$screen), ]
trials <- data[data$screen == "Trial", ]
df <- data.frame(
Participant = trials$participant_id,
Age = as.numeric(jsonlite::fromJSON(dem[1])$age),
Sex = jsonlite::fromJSON(dem[2])$sex,
Education = jsonlite::fromJSON(dem[2])$education,
Nationality = tools::toTitleCase(jsonlite::fromJSON(dem[1])$nationality),
Ethnicity = tools::toTitleCase(jsonlite::fromJSON(dem[1])$ethnicity),
Date = ifelse(is.null(info$date), NA, info$date),
Time = ifelse(is.null(info$time), NA, info$time),
Duration = as.numeric(data[data$screen == "final_results", "time_elapsed"]) / 1000 / 60,
Break_Duration = as.numeric(data[data$screen == "break" & !is.na(data$screen), "rt"]) / 1000 / 60,
Screen_Resolution = paste0(trials$screen_width, "x", trials$screen_height),
Screen_Size = (as.numeric(trials$screen_width) / 1000) * (as.numeric(trials$screen_height) / 1000),
Screen_Refresh = trials$vsync_rate,
Browser = trials$browser,
Browser_Version = trials$browser_version,
Device = ifelse(trials$mobile == TRUE, "Mobile", "Desktop"),
Device_OS = trials$os,
Illusion_Type = trials$type,
Block = ifelse(trials$block_number > 10, 2, 1),
Block_Order = as.numeric(trials$block_number),
Trial = as.numeric(trials$trial_number),
Stimulus = gsub(".png", "", gsub("stimuli/", "", trials$stimulus)),
Illusion_Strength = as.numeric(trials$illusion_strength),
Illusion_Side = as.factor(sign(as.numeric(trials$illusion_difference))),
Illusion_Difference = abs(as.numeric(trials$illusion_difference)),
Answer = trials$response,
Error = as.integer(!as.logical(trials$correct)),
ISI = as.numeric(data[data$screen == "fixation" & !is.na(data$screen), "trial_duration"]),
RT = as.numeric(trials$rt)
)
# Format names
df$Illusion_Type <- ifelse(df$Illusion_Type == "MullerLyer", "Müller-Lyer", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "Zollner", "Zöllner", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "RodFrame", "Rod-Frame", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "VerticalHorizontal", "Vertical-Horizontal", df$Illusion_Type)
# Format education
df$Education <- gsub("University (", "", df$Education, fixed = TRUE)
df$Education <- gsub(")", "", df$Education, fixed = TRUE)
df$Education <- tools::toTitleCase(df$Education)
# Standardize demographics
# unique(df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Hispanic", "Hisapanic"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Mixed/Latino", "Mexicano"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Latin"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White Middle European (Slavic)", "Greek"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White - Caucasian", " Caucasian"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White", "Caucasian "), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Black"), "African", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("5c73e5d89b46930001ee7edc"), NA, df$Ethnicity)
# unique(df$Nationality)
df$Nationality <- ifelse(df$Nationality %in% c("Israe;"), "Israel", df$Nationality)
df
}
# Run ---------------------------------------------------------------------
# This is a local folder containing raw data from unzipped pavlovia
# It has been added to .gitignore to NOT be published on github
# (it contains the subject ID of the participants)
participants <- list.files("rawdata/")
df <- data.frame()
for (ppt in participants) {
df <- rbind(df, preprocess_raw(file = paste0("rawdata/", ppt)))
}
# Study 1
df$Study <- 1
unique(sqrt(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"]))
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"])
df$Illusion_Difference_Sqrt <- df$Illusion_Difference
df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"] <- sqrt(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"])
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
# Preprocessing Function
preprocess_raw <- function(file) {
data <- read.csv(file)
if (!"final_results" %in% data$screen) {
print(paste0("Warning: Incomplete data for ", file))
return(data.frame())
}
# Demographics
dem <- data[data$screen == "demographics" & !is.na(data$screen), "response"]
# Info
info <- data[data$screen == "browser_info" & !is.na(data$screen), ]
trials <- data[data$screen == "Trial", ]
df <- data.frame(
Participant = trials$participant_id,
Age = as.numeric(jsonlite::fromJSON(dem[1])$age),
Sex = jsonlite::fromJSON(dem[2])$sex,
Education = jsonlite::fromJSON(dem[2])$education,
Nationality = tools::toTitleCase(jsonlite::fromJSON(dem[1])$nationality),
Ethnicity = tools::toTitleCase(jsonlite::fromJSON(dem[1])$ethnicity),
Date = ifelse(is.null(info$date), NA, info$date),
Time = ifelse(is.null(info$time), NA, info$time),
Duration = as.numeric(data[data$screen == "final_results", "time_elapsed"]) / 1000 / 60,
Break_Duration = as.numeric(data[data$screen == "break" & !is.na(data$screen), "rt"]) / 1000 / 60,
Screen_Resolution = paste0(trials$screen_width, "x", trials$screen_height),
Screen_Size = (as.numeric(trials$screen_width) / 1000) * (as.numeric(trials$screen_height) / 1000),
Screen_Refresh = trials$vsync_rate,
Browser = trials$browser,
Browser_Version = trials$browser_version,
Device = ifelse(trials$mobile == TRUE, "Mobile", "Desktop"),
Device_OS = trials$os,
Illusion_Type = trials$type,
Block = ifelse(trials$block_number > 10, 2, 1),
Block_Order = as.numeric(trials$block_number),
Trial = as.numeric(trials$trial_number),
Stimulus = gsub(".png", "", gsub("stimuli/", "", trials$stimulus)),
Illusion_Strength = as.numeric(trials$illusion_strength),
Illusion_Side = as.factor(sign(as.numeric(trials$illusion_difference))),
Illusion_Difference = abs(as.numeric(trials$illusion_difference)),
Answer = trials$response,
Error = as.integer(!as.logical(trials$correct)),
ISI = as.numeric(data[data$screen == "fixation" & !is.na(data$screen), "trial_duration"]),
RT = as.numeric(trials$rt)
)
# Format names
df$Illusion_Type <- ifelse(df$Illusion_Type == "MullerLyer", "Müller-Lyer", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "Zollner", "Zöllner", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "RodFrame", "Rod-Frame", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "VerticalHorizontal", "Vertical-Horizontal", df$Illusion_Type)
# Format education
df$Education <- gsub("University (", "", df$Education, fixed = TRUE)
df$Education <- gsub(")", "", df$Education, fixed = TRUE)
df$Education <- tools::toTitleCase(df$Education)
# Standardize demographics
# unique(df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Hispanic", "Hisapanic"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Mixed/Latino", "Mexicano"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Latin"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White Middle European (Slavic)", "Greek"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White - Caucasian", " Caucasian"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White", "Caucasian "), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Black"), "African", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("5c73e5d89b46930001ee7edc"), NA, df$Ethnicity)
# unique(df$Nationality)
df$Nationality <- ifelse(df$Nationality %in% c("Israe;"), "Israel", df$Nationality)
df
}
# Run ---------------------------------------------------------------------
# This is a local folder containing raw data from unzipped pavlovia
# It has been added to .gitignore to NOT be published on github
# (it contains the subject ID of the participants)
participants <- list.files("rawdata/")
df <- data.frame()
for (ppt in participants) {
df <- rbind(df, preprocess_raw(file = paste0("rawdata/", ppt)))
}
# Study 1
df$Study <- 1
df$Illusion_Difference_Sqrt <- df$Illusion_Difference
df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"] <- sqrt(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
# Save anonmized data
write.csv(df, "data/study1.csv", row.names = FALSE)
df <- read.csv("data/study1.csv") |>
mutate(
Screen_Refresh = as.character(Screen_Refresh),
Illusion_Side = as.factor(Illusion_Side),
Block = as.factor(Block),
Education = fct_relevel(Education, "Master", "Bachelor", "High School", "Other")
)
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference"])
outliers <- c(
# Half of the trials are of very short RT
# Prolific Status: REJECTED
"60684f29dbfe1bb2059e5e27_rkqoy",
# Error rate of 47.9%
# Prolific Status: RETURN REQUESTED
"61280140171ec546e87ed8cb_qdlgy",
# Error rate of 46.2%
# Prolific Status: RETURN REQUESTED
"614f36fd81c78b7a125c4262_6ax4g",
# Error rate of 42.1% and very large RT SD
# Prolific Status: RETURN REQUESTED
"5d398380b37ab1000111fac3_2nxxh",
# Block n2 with very short RTs
# Prolific Status: RETURNED
"5e860198a846e30497df5189_6e43s",
# Error rate of 46.2% and short RTs
# Prolific Status: RETURN REQUESTED
"615f319bb341cf2f306d858d_qsaq5"
)
dfsub <- df |>
group_by(Participant) |>
summarize(
# n = n(),
Error = sum(Error) / n(),
RT_Mean = mean(RT),
RT_SD = sd(RT),
) |>
ungroup() |>
arrange(desc(Error))
knitr::kable(dfsub) |>
kableExtra::row_spec(which(dfsub$Participant %in% outliers), background  = "#EF9A9A")
# Filter out
df <- filter(df, !Participant %in% outliers)
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
temp <- df |>
group_by(Participant, Illusion_Type, Block) |>
summarize(ErrorRate_per_block = sum(Error) / n()) |>
ungroup() |>
arrange(desc(ErrorRate_per_block))
temp2 <- temp |>
filter(ErrorRate_per_block >= 0.5) |>
group_by(Illusion_Type, Block) |>
summarize(n = n()) |>
arrange(desc(n), Illusion_Type) |>
ungroup() |>
mutate(n_trials = cumsum(n * 56),
p_trials = n_trials / nrow(df))
# Drop
df <- df |>
group_by(Participant, Illusion_Type, Block) |>
mutate(ErrorRate_per_block = sum(Error) / n()) |>
ungroup() |>
filter(ErrorRate_per_block < 0.5) |>
select(-ErrorRate_per_block)
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
rm(temp, temp2)
dfsub <- df |>
group_by(Participant) |>
select(Participant, Age, Sex, Education, Nationality, Ethnicity, Duration, Break_Duration, Screen_Resolution, Screen_Refresh, Device_OS) |>
slice(1) |>
ungroup()
df$Outlier <- df$RT < 150 | df$RT > 3000
df <- filter(df, Outlier == FALSE)
dfsub <- df |>
group_by(Participant) |>
select(Participant, Age, Sex, Education, Nationality, Ethnicity, Duration, Break_Duration, Screen_Resolution, Screen_Refresh, Device_OS) |>
slice(1) |>
ungroup()
unique(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
data <- filter(df, Illusion_Type == "Delboeuf")
data |>
group_by(Illusion_Difference) |>
summarize(Error = mean(Error)) |>
ggplot(aes(x = Illusion_Difference, y = Error)) +
# geom_bar(stat="identity") +
geom_line(aes(group = 1))
data |>
group_by(Illusion_Difference_Sqrt) |>
summarize(Error = mean(Error)) |>
ggplot(aes(x = Illusion_Difference_Sqrt, y = Error)) +
# geom_bar(stat="identity") +
geom_line(aes(group = 1))
data |>
group_by(Illusion_Difference) |>
summarize(Error = mean(Error)) |>
mutate(Illusion_Difference = 1 / Illusion_Difference)
data |>
group_by(Illusion_Difference) |>
summarize(Error = mean(Error)) |>
mutate(Illusion_Difference = 1 / Illusion_Difference) |>
ggplot(aes(x = Illusion_Difference, y = Error)) +
# geom_bar(stat="identity") +
geom_line(aes(group = 1))
# Preprocessing Function
preprocess_raw <- function(file) {
data <- read.csv(file)
if (!"final_results" %in% data$screen) {
print(paste0("Warning: Incomplete data for ", file))
return(data.frame())
}
# Demographics
dem <- data[data$screen == "demographics" & !is.na(data$screen), "response"]
# Info
info <- data[data$screen == "browser_info" & !is.na(data$screen), ]
trials <- data[data$screen == "Trial", ]
df <- data.frame(
Participant = trials$participant_id,
Age = as.numeric(jsonlite::fromJSON(dem[1])$age),
Sex = jsonlite::fromJSON(dem[2])$sex,
Education = jsonlite::fromJSON(dem[2])$education,
Nationality = tools::toTitleCase(jsonlite::fromJSON(dem[1])$nationality),
Ethnicity = tools::toTitleCase(jsonlite::fromJSON(dem[1])$ethnicity),
Date = ifelse(is.null(info$date), NA, info$date),
Time = ifelse(is.null(info$time), NA, info$time),
Duration = as.numeric(data[data$screen == "final_results", "time_elapsed"]) / 1000 / 60,
Break_Duration = as.numeric(data[data$screen == "break" & !is.na(data$screen), "rt"]) / 1000 / 60,
Screen_Resolution = paste0(trials$screen_width, "x", trials$screen_height),
Screen_Size = (as.numeric(trials$screen_width) / 1000) * (as.numeric(trials$screen_height) / 1000),
Screen_Refresh = trials$vsync_rate,
Browser = trials$browser,
Browser_Version = trials$browser_version,
Device = ifelse(trials$mobile == TRUE, "Mobile", "Desktop"),
Device_OS = trials$os,
Illusion_Type = trials$type,
Block = ifelse(trials$block_number > 10, 2, 1),
Block_Order = as.numeric(trials$block_number),
Trial = as.numeric(trials$trial_number),
Stimulus = gsub(".png", "", gsub("stimuli/", "", trials$stimulus)),
Illusion_Strength = as.numeric(trials$illusion_strength),
Illusion_Side = as.factor(sign(as.numeric(trials$illusion_difference))),
Illusion_Difference = abs(as.numeric(trials$illusion_difference)),
Answer = trials$response,
Error = as.integer(!as.logical(trials$correct)),
ISI = as.numeric(data[data$screen == "fixation" & !is.na(data$screen), "trial_duration"]),
RT = as.numeric(trials$rt)
)
# Format names
df$Illusion_Type <- ifelse(df$Illusion_Type == "MullerLyer", "Müller-Lyer", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "Zollner", "Zöllner", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "RodFrame", "Rod-Frame", df$Illusion_Type)
df$Illusion_Type <- ifelse(df$Illusion_Type == "VerticalHorizontal", "Vertical-Horizontal", df$Illusion_Type)
# Format education
df$Education <- gsub("University (", "", df$Education, fixed = TRUE)
df$Education <- gsub(")", "", df$Education, fixed = TRUE)
df$Education <- tools::toTitleCase(df$Education)
# Standardize demographics
# unique(df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Hispanic", "Hisapanic"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Mixed/Latino", "Mexicano"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Latin"), "Latino", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White Middle European (Slavic)", "Greek"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White - Caucasian", " Caucasian"), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("White", "Caucasian "), "Caucasian", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("Black"), "African", df$Ethnicity)
df$Ethnicity <- ifelse(df$Ethnicity %in% c("5c73e5d89b46930001ee7edc"), NA, df$Ethnicity)
# unique(df$Nationality)
df$Nationality <- ifelse(df$Nationality %in% c("Israe;"), "Israel", df$Nationality)
df
}
# Run ---------------------------------------------------------------------
# This is a local folder containing raw data from unzipped pavlovia
# It has been added to .gitignore to NOT be published on github
# (it contains the subject ID of the participants)
participants <- list.files("rawdata/")
df <- data.frame()
for (ppt in participants) {
df <- rbind(df, preprocess_raw(file = paste0("rawdata/", ppt)))
}
# Study 1
df$Study <- 1
# df$Illusion_Difference_Sqrt <- df$Illusion_Difference
# df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"] <- sqrt(df[df$Illusion_Type == "Delboeuf", "Illusion_Difference_Sqrt"])
# Save anonmized data
write.csv(df, "data/study1.csv", row.names = FALSE)
